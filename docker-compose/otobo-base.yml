# Docker compose file for the OTOBO webapp.
# Note that no port is exposed as both HTTP and HTTPS are supported.
# For HTTP see the extension file docker-compose/otobo-override-http.yml.
# For HTTPS see the extension file docker-compose/otobo-override-https.yml.

# See also README.md.

# most current docker-compose file version, as of 2020-05-21
version: '3.3'

services:

  # the database
  db:
    image: ${OTOBO_IMAGE_DB:-mariadb:10.5}
    user: mysql:mysql
    cap_drop:
        - ALL
    cap_add:
        - CAP_SYS_CHROOT
    restart: always
    volumes:
      - mariadb_data:/var/lib/mysql

    # do not expose the mysql default port to the docker host host
    # use 'docker-compose exec -it db mysql ...' when access is needed
    # because the the otobo DB user is allowed for the complete Docker network
    # ports:
      #- "5001:3306"

    # Set the db root password which has to be entered when running otobo/installer.pl.
    # The passwort is secrect and can be stored in the file .env.
    # The content of the .env file is something like:
    # OTOBO_DB_ROOT_PASSWORD=otobo_root
    environment:
      MYSQL_ROOT_PASSWORD: ${OTOBO_DB_ROOT_PASSWORD:?err}
    command: --max-allowed-packet=68157440 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb-log-file-size=268435456 --query-cache-size=${OTOBO_DB_QUERY_CACHE_SIZE:-33554432}

  # a container running a webserver
  web:
    # The services 'web' and 'daemon' use the same image.
    image: ${OTOBO_IMAGE_OTOBO:-rotheross/otobo:latest}
    cap_drop:
        - ALL
    #cap_add:
    depends_on:
      - db
      - elastic
      - redis
    restart: always
    # The HTTP port might be specified in a docker-compose extension file, e.g. docker-compose/otobo-override-http.yml.
    # For HTTPS no HTTP port is exposed.
    #ports:
    #    - "80:5000"
    volumes:
      - opt_otobo:/opt/otobo
    command: web

  # a container running the OTOBO daemon
  daemon:
    # The services 'web' and 'daemon' use the same image.
    image: ${OTOBO_IMAGE_OTOBO:-rotheross/otobo:latest}
    cap_drop:
        - ALL
    #cap_add:
    depends_on:
      - web
    restart: always
    volumes:
      - opt_otobo:/opt/otobo
    command: daemon

  # a container running Elasticsearch
  elastic:
    image: ${OTOBO_IMAGE_OTOBO_ELASTICSEARCH:-rotheross/otobo-elasticsearch:latest}
    cap_drop:
        - ALL
    cap_add:
        - CAP_SYS_CHROOT
        - CAP_SETUID
        - CAP_SETGID
    restart: always
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: ${OTOBO_ELASTICSEARCH_ES_JAVA_OPTS:?err}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # a container running Redis
  redis:
    image: redis:6.0-alpine
    user: redis:redis
    cap_drop:
        - ALL
    #cap_add:
    restart: always
    volumes:
      - redis_data:/data


# no volumnes need to be exposed across services
volumes:
  mariadb_data: {}
  opt_otobo: {}
  elasticsearch_data: {}
  redis_data: {}
